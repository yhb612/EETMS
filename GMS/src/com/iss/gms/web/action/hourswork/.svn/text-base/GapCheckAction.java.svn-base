package com.iss.gms.web.action.hourswork;

import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.LazyValidatorForm;

import com.iss.gms.entity.EmployeeHoursDetailInfo;
import com.iss.gms.entity.HoursWorkStatisticsInfo;
import com.iss.gms.service.HoursWorkService;
import com.iss.gms.service.IEmployeeService;
import com.iss.gms.utils.GmsUtils;


public class GapCheckAction extends DispatchAction {
	Logger log = Logger.getLogger(GapCheckAction.class);
	private HoursWorkService hoursWorkService ;
	private IEmployeeService employeeService;
	private String expPath;
	
	public void setExpPath(String expPath) {
		this.expPath = expPath;
	}

	public void setEmployeeService(IEmployeeService employeeService) {
		this.employeeService = employeeService;
	}

	public void setHoursWorkService(HoursWorkService hoursWorkService) {
		this.hoursWorkService = hoursWorkService;
	}

	public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			LazyValidatorForm lzform = (LazyValidatorForm)form;
			String Id4g = (String)lzform.get("Id4g"); 
			String dateS = (String)lzform.get("dateS4g"); 
			String dateE = (String)lzform.get("dateE4g"); 
			String gapType = (String)lzform.get("gapType"); 
			EmployeeHoursDetailInfo egvi = new EmployeeHoursDetailInfo();
				egvi.setEmployeeId(Id4g);
			
			if(null==dateS || dateS.trim().length()==0) return mapping.findForward("success");
				egvi.setStartDate(GmsUtils.gmsFormToDate(dateS));
			if(null==dateE || dateE.trim().length()==0) return mapping.findForward("success");
				egvi.setEndDate(GmsUtils.gmsFormToDate(dateE));
			//≤Ó“Ï÷÷¿‡
			if("0".equals(gapType)){
				egvi.setSignG("yes");
			}else if("1".equals(gapType)){
				egvi.setSignL("yes");
			}
			List<EmployeeHoursDetailInfo> gapChList = hoursWorkService.queryGapInfo(egvi);
			for(EmployeeHoursDetailInfo tem:gapChList){
				HoursWorkStatisticsInfo hwsi =hoursWorkService.queryHoursStatistics(tem.getEmployeeId());
				if(hwsi!=null) {
					Float lsth = hwsi.getLastSwoppedTotalHours();
					tem.setHours4VacTotal(lsth);
				}
			}
			request.setAttribute("emid", Id4g);
			request.setAttribute("gapChList", gapChList);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.getMessage());
			return mapping.findForward("error");
		}
		return mapping.findForward("success");
	}
	
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			String str = request.getParameter("msg");
			SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy",Locale.US);
			
			try{
				String temp [] = str.split(",");
				if(temp.length!=7) return mapping.findForward("success");
				EmployeeHoursDetailInfo ehdi = new EmployeeHoursDetailInfo();
				if(temp[0].trim().length()==0) return mapping.findForward("success");
				ehdi.setEmployeeId(temp[0]);
				ehdi.setStandardDate(sdf.parse(temp[1]));
				ehdi.setGapType(temp[2]);
				ehdi.setEmployeeGapReason(GmsUtils.fix2utf(temp[3]));
				ehdi.setCustomerResponsiblePerson(GmsUtils.fix2utf(temp[4]));
				ehdi.setCompanyProjectManager(GmsUtils.fix2utf(temp[5]));
				ehdi.setBelongedProject(GmsUtils.fix2utf(temp[6]));
				System.out.println(GmsUtils.gmsFormToString(sdf.parse(temp[1])));
				hoursWorkService.modifyGapInfo(ehdi);
				return search(mapping, form, request, response);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.getMessage());
			return mapping.findForward("error");
		}
	}
	
	public ActionForward exportData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LazyValidatorForm lzform = (LazyValidatorForm)form;
		try {
			String Id4g = (String)lzform.get("Id4g"); 
			String dateS = (String)lzform.get("dateS"); 
			String dateE = (String)lzform.get("dateE"); 
			String gapType = (String)lzform.get("gapType"); 
			EmployeeHoursDetailInfo ehdi = new EmployeeHoursDetailInfo();
				ehdi.setEmployeeId(Id4g);
			if(null!=dateS&&dateS.trim().length()>0){
					ehdi.setStartDate(GmsUtils.gmsFormToDate(dateS));
				
			}
			if(null!=dateE&&dateE.trim().length()>0){
				ehdi.setEndDate(GmsUtils.gmsFormToDate(dateE));
			}
			ehdi.setGapType(gapType);
			List<EmployeeHoursDetailInfo> gapChList = hoursWorkService.queryGapInfo(ehdi);
			String path = new String (expPath.getBytes("iso-8859-1"),"utf-8");
			System.out.println(path);
			GmsUtils.exportExcel(gapChList,path,dateS,dateE);
			return mapping.findForward("success");
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			request.setAttribute("err_msg", e);
			return mapping.findForward("error");
		}
	}
	
}