package com.iss.gms.dao.emp;

import java.sql.SQLException;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.iss.gms.entity.CustomerQuoteInfo;
import com.iss.gms.entity.EmployeeBasicInfo;
import com.iss.gms.entity.EmployeeDimissionInfo;
import com.iss.gms.entity.EmployeeRelegationInfo;
import com.iss.gms.entity.EmployeeVacationInfo;


public class EmployeeDao extends SqlMapClientDaoSupport {
	Logger	log	= Logger.getLogger("EmployeeDao.java");
	
	
	
	/**
	 * 根据员工姓名查询
	 * @return
	 * @param ‘员工姓名’ 或者 ‘员工编号’ 
	 * @throws SQLException 
	 */
	public List queryByName(String name)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryByName",name);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 根据客户定义姓名查询
	 * @return
	 * @param ‘员工姓名’ 或者 ‘员工编号’ 
	 * @throws SQLException 
	 */
	public List<EmployeeBasicInfo> queryByCusName(String name)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryByCusName",name);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	
	/**
	 * 添加员工基本信息
	 * @param 员工基本信息
	 * @return 
	 * @throws SQLException 
	 */
	public void addEmpInfo(EmployeeBasicInfo ef)throws SQLException{
		try {
			 getSqlMapClientTemplate().insert("insertEmpInfo",ef);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 修改员工基本信息
	 * @param 员工编号
	 * @return 
	 * @throws SQLException 
	 */
	public void modifyEmpInfo(EmployeeBasicInfo ef)throws SQLException{
		try {
			 getSqlMapClientTemplate().update("modifyEmpInfo",ef);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 删除员工基本信息
	 * @param 员工编号
	 * @return 
	 * @throws SQLException 
	 */
	public void removeEmpInfo(String eid)throws SQLException{
		try {
			 getSqlMapClientTemplate().delete("removeEmpInfo",eid);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 查询所有部门
	 * @return
	 * @param  
	 * @throws SQLException 
	 */
	public List<String> queryDptmts()throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryDptmts");
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 查询所有人员姓名byRank
	 * @return
	 * @param  
	 * @throws SQLException 
	 */
	public List<String> queryNameListByRank(String rank)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryNameListByRank",rank);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 根据条件查询员工归属信息
	 * @return 
	 * @throws SQLException 
	 */
	public List queryRelegationInfo(EmployeeRelegationInfo eri)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryRelegationInfo",eri);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 添加员工归属信息
	 * @return 
	 * @throws SQLException 
	 */
	public void addRelegationInfo(EmployeeRelegationInfo eri)throws SQLException{
		try {
			getSqlMapClientTemplate().insert("insertEmpRelInfo",eri);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 根据员工编号、项目、状态  查询归属信息
	 * @return 
	 * @throws SQLException 
	 */
	public EmployeeRelegationInfo queryEriInfoByEid(EmployeeRelegationInfo eri)throws SQLException{
		try {
			return (EmployeeRelegationInfo)getSqlMapClientTemplate().queryForObject("queryEriInfoByEid", eri);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 修改员工归属信息
	 * @return 
	 * @throws SQLException 
	 */
	public void modifyEmpRelInfo(EmployeeRelegationInfo eri )throws SQLException{
		try {
			getSqlMapClientTemplate().update("modifyEmpRelInfo",eri);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 删除员工归属信息
	 * @return 
	 * @throws SQLException 
	 */
	public void removeEmpRelInfo(EmployeeRelegationInfo eri )throws SQLException{
		try {
			getSqlMapClientTemplate().delete("removeEmpRelInfo",eri);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 根据条件查询员工请假信息
	 * @return 
	 * @throws SQLException 
	 */
	public List queryVacationInfo(EmployeeVacationInfo evi)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryVacationInfo",evi);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 根据条件查询员工请假信息
	 * @return 
	 * @throws SQLException 
	 */
	public List queryDimissionInfo(EmployeeDimissionInfo edi)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryDimissionInfo",edi);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 添加员工请假信息
	 * @return 
	 * @throws SQLException 
	 */
	public void addVacationInfo(EmployeeVacationInfo evi)throws SQLException{
		try {
			getSqlMapClientTemplate().insert("addVacationInfo",evi);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 添加员工离职信息
	 * @param 员工基本信息
	 * @return 
	 * @throws SQLException 
	 */
	public void addDimissionInfo(EmployeeDimissionInfo edi)throws SQLException{
		try {
			 getSqlMapClientTemplate().insert("addDimissionInfo",edi);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 修改员工离职信息
	 * @param by 员工编号
	 * @return 
	 * @throws SQLException 
	 */
	public void modifyInfoById(EmployeeDimissionInfo edi)throws SQLException{
		try {
			 getSqlMapClientTemplate().update("modifyInfoById",edi);
			
		} catch (Exception e) {
			
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 查询客户报价
	 * @param 
	 * @return 
	 * @throws SQLException 
	 */
	public CustomerQuoteInfo queryCstmQuoteInfo()throws SQLException{
		try {
			return (CustomerQuoteInfo)getSqlMapClientTemplate().queryForObject("queryCstmQuoteInfo");
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 修改客户报价信息
	 * @param 
	 * @return 
	 * @throws SQLException 
	 */
	public void modifyCstmQuoteInfo(CustomerQuoteInfo cqi)throws SQLException{
		try {
			getSqlMapClientTemplate().update("modifyCstmQuoteInfo",cqi);
			
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	/**
	 * 添加客户报价信息
	 * @param 
	 * @return 
	 * @throws SQLException 
	 */
	public void addCstmQuoteInfo(CustomerQuoteInfo cqi)throws SQLException{
		try {
			getSqlMapClientTemplate().insert("addCstmQuoteInfo",cqi);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
	
	/**
	 * 查询某项目下的计费员工
	 * @return
	 * @param ‘项目名称’ 
	 * @throws SQLException 
	 */
	public List<EmployeeRelegationInfo> queryEmpsByProName(String proName)throws SQLException{
		try {
			return getSqlMapClientTemplate().queryForList("queryEmpsByProName",proName);
		} catch (Exception e) {
			log.error("", e);
			throw new SQLException(e.getMessage());
		}
	}
}
