package com.iss.gms.utils;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.iss.gms.entity.EmployeeHoursDetailInfo;

public class GmsUtils {

	  //格式化日期类型
		public static Date gmsFormToDate(String str)throws Exception{
			SimpleDateFormat a=new  SimpleDateFormat("yyyy-MM-dd");
			Date mydate=a.parse(str);
			return mydate;
		}
		
		//格式化日期类型
		public static String gmsFormToString(Date d)throws Exception{
			SimpleDateFormat a=new  SimpleDateFormat("yyyy-MM-dd");
			String str=a.format(d);
			return str;
		}
		
		//计算(司龄、工龄)
		public static String calculate(String inputDate,String arg)throws ParseException{
			//当前时间
			Date n = new Date(); 
			//输入时间
			Date m = new Date(); 
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			m=df.parse(inputDate);
			long a = n.getTime(); 
			long b = m.getTime();
			long s= (a-b)/(1000); 
			int hh=(int)s/3600; //共计小时数 
			int dd=(int)hh/24; //共计天数
			String p=null;
			if("m".equals(arg)){
				//"司龄(月)
				int mt=(int)dd/30;
				p=String.valueOf(mt);
			}else if("y".equals(arg)){
				//工龄(年)
				int mt=(int)dd/365;
				p=String.valueOf(mt);
			}
			return p;
		}
		
	  //读取excel ;参数:firstRowNum4Read:需要读取的第一条数据，0为起始;   creat By li,dongming
	  public static List<String []> readExcel(int firstRowNum4Read,InputStream input,String version) throws Exception {
		  List<String []> rowList = new ArrayList<String []>();
		  //office2003以前版本,文件后缀.xls
		  if(version.equals("2003")){
			  HSSFWorkbook wb = new HSSFWorkbook(input);
			  HSSFSheet sheet = wb.getSheetAt(0);
			  int rowCount = sheet.getPhysicalNumberOfRows();//获取行数
			  int colCount = sheet.getRow(firstRowNum4Read-1).getPhysicalNumberOfCells();//获取（非空的）列总数，firstRowNum4Read-1默认为获取抬头行
			  for(int i=firstRowNum4Read;i<rowCount;i++){
				  HSSFRow row = sheet.getRow(i);
				  String[] colArr = new String[colCount];
				  for(int j=0;j<colCount;j++){
					//根据cell里的数据类型进行相应处理
						if(row.getCell(j)==null) continue;
						switch (row.getCell(j).getCellType()) {
							case Cell.CELL_TYPE_NUMERIC:
								if (DateUtil.isCellDateFormatted(row.getCell(j))) {
									Date theDate = row.getCell(j).getDateCellValue();
									colArr[j] = gmsFormToString(theDate);
								} else {
									colArr[j] = Double.toString(row.getCell(j)
											.getNumericCellValue());
								}
								break;
							case Cell.CELL_TYPE_BLANK:
								colArr[j] = "";
								break;
							case Cell.CELL_TYPE_BOOLEAN:
								colArr[j] = row.getCell(j).getBooleanCellValue() + "";
								break;
							case Cell.CELL_TYPE_ERROR:
								colArr[j] = row.getCell(j).getErrorCellValue() + "";
								break;
							case Cell.CELL_TYPE_FORMULA:
								colArr[j] = row.getCell(j).getCellFormula();
								break;
							default:
								colArr[j] = row.getCell(j).getStringCellValue();
						}
				  }
				  rowList.add(colArr);
			  }
		  }else if(version.equals("2007")){//office2007版本,文件后缀.xlsx
			  XSSFWorkbook wb = new XSSFWorkbook(input);//获得excel工作薄
			  XSSFSheet sheet = wb.getSheetAt(0); //只导入第一个sheet里的内容
			  int rowCount = sheet.getPhysicalNumberOfRows();//获取行数
			  int colCount = sheet.getRow(0).getPhysicalNumberOfCells();//获取列数，默认第一行为抬头行
			  //从指定的行数(firstRowNum4Read)开始解析
			  for(int i=firstRowNum4Read;i<rowCount;i++){
				  XSSFRow row = sheet.getRow(i);
				  //空行--跳过
				  if(row==null ) continue;
				  String[] colArr = new String[colCount];
					  for(int j=0;j<colCount;j++){
						  //根据cell里的数据类型进行相应处理
						if(row.getCell(j)==null) continue;
						switch (row.getCell(j).getCellType()) {
							case Cell.CELL_TYPE_NUMERIC:
								if (DateUtil.isCellDateFormatted(row.getCell(j))) {
									Date theDate = row.getCell(j).getDateCellValue();
									colArr[j] = gmsFormToString(theDate);
								} else {
									colArr[j] = Double.toString(row.getCell(j)
											.getNumericCellValue());
								}
								break;
							case Cell.CELL_TYPE_BLANK:
								colArr[j] = "";
								break;
							case Cell.CELL_TYPE_BOOLEAN:
								colArr[j] = row.getCell(j).getBooleanCellValue() + "";
								break;
							case Cell.CELL_TYPE_ERROR:
								colArr[j] = row.getCell(j).getErrorCellValue() + "";
								break;
							case Cell.CELL_TYPE_FORMULA:
								colArr[j] = row.getCell(j).getCellFormula();
								break;
							default:
								colArr[j] = row.getCell(j).getStringCellValue();
						}
					  }
					  rowList.add(colArr);
			  }
		  }
		  //返回一个list<String []> 其中的每一个String[]内是该行所有字段的值
		  input.close();
		  return rowList;
	  }
	  
	  
	  //导出“GAP工时核查信息”至excel
	  public static void exportExcel(List<EmployeeHoursDetailInfo> list , String excelpath , String sdate , String edate) throws Exception{
				HSSFWorkbook wb = new HSSFWorkbook();
				HSSFSheet sheet = wb.createSheet("统计工时");
				HSSFRow  row = sheet.createRow(0);
				HSSFCell cell = row.createCell(0);
				cell.setCellValue(sdate+"至"+edate+"的员工工时统计");
				cell = row.createCell(5);
				cell.setCellValue(
						"注意：差异类型填写规范(只须填入对应号码)： 0-迟到早退,1-现场储备,2-回公司开会,3-离场,4-公司储备,5-打卡异常,6-闲置,7-正常倒休,8-重复工时追加倒休;"
						);
				row = sheet.createRow(1);
				cell = row.createCell(0);
				cell.setCellValue("员工编号");
				cell = row.createCell(1);
				cell.setCellValue("员工姓名");
				cell = row.createCell(2);
				cell.setCellValue("日期");
				cell = row.createCell(3);
				cell.setCellValue("星期");
				cell = row.createCell(4);
				cell.setCellValue("日期类型");
				cell = row.createCell(5);
				cell.setCellValue("应出勤工时");
				cell = row.createCell(6);
				cell.setCellValue("所属项目名称");
				cell = row.createCell(7);
				cell.setCellValue("客户确认正常工时");
				cell = row.createCell(8);
				cell.setCellValue("客户确认加班工时");
				cell = row.createCell(9);
				cell.setCellValue("PSA请假工时");
				cell = row.createCell(10);
				cell.setCellValue("PSA请假类型");
				cell = row.createCell(11);
				cell.setCellValue("新增可倒休工时");
				cell = row.createCell(12);
				cell.setCellValue("新增可补贴工时");
				cell = row.createCell(13);
				cell.setCellValue("差异工时");
				cell = row.createCell(14);
				cell.setCellValue("差异类型");
				cell = row.createCell(15);
				cell.setCellValue("差异原因");
				cell = row.createCell(16);
				cell.setCellValue("客户方负责人");
				cell = row.createCell(17);
				cell.setCellValue("公司项目经理");
				cell = row.createCell(18);
				cell.setCellValue("客户所属项目");
				for(int i=0 ; i<list.size() ; i++){
					EmployeeHoursDetailInfo  egvi = list.get(i) ;
					row = sheet.createRow(i+2);
					cell = row.createCell(0);
					cell.setCellValue(egvi.getEmployeeId());  //员工编号
					cell = row.createCell(1);
					cell.setCellValue(egvi.getEmployeeName());  //员工姓名
					cell = row.createCell(2);
					cell.setCellValue(egvi.getStandardDate()==null ? "":gmsFormToString(egvi.getStandardDate()));  //日期
					cell = row.createCell(3);
					cell.setCellValue(egvi.getStandardWeek() );  //星期
					cell = row.createCell(4);
					cell.setCellValue(egvi.getStandardDateType() );  //日期类型
					cell = row.createCell(5);
					cell.setCellValue(egvi.getStandardHours() );    //应出勤工时
					cell = row.createCell(6);
					cell.setCellValue(egvi.getProjectName() );    //所属项目名称
					cell = row.createCell(7);
					cell.setCellValue(egvi.getCustomerVerifyHours()==null?"":egvi.getCustomerVerifyHours().toString());    //客户确认正常工时
					cell = row.createCell(8);
					cell.setCellValue(egvi.getCustomerVerifyOvertimeHours()==null?"":egvi.getCustomerVerifyOvertimeHours().toString() );    //客户确认加班工时
					cell = row.createCell(9);
					cell.setCellValue(egvi.getPsaLeaveHours()==null?"":egvi.getPsaLeaveHours().toString() );   //PSA请假工时
					cell = row.createCell(10);
					cell.setCellValue(egvi.getPsaLeaveHoursType() );  //PSA请假类型
					cell = row.createCell(11);
					cell.setCellValue(egvi.getCurrentAhughHours()==null?"":egvi.getCurrentAhughHours().toString() );  //新增可倒休工时
					cell = row.createCell(12);
					cell.setCellValue(egvi.getCurrentSubsidiesHours()==null?"":egvi.getCurrentSubsidiesHours().toString() );  //新增可补贴工时
					cell = row.createCell(13);
					cell.setCellValue(egvi.getCurrentGapHours()==null?"":egvi.getCurrentGapHours().toString() );  //差异工时
					cell = row.createCell(14);
					cell.setCellValue(egvi.getGapType() );  //差异类型
					cell = row.createCell(15);
					cell.setCellValue(egvi.getEmployeeGapReason() );  //差异原因
					cell = row.createCell(16);
					cell.setCellValue(egvi.getCustomerResponsiblePerson() ); // 客户方负责人
					cell = row.createCell(17);
					cell.setCellValue(egvi.getCompanyProjectManager() );  //公司项目经理
					cell = row.createCell(18);
					cell.setCellValue(egvi.getBelongedProject() );  //客户所属项目
					
				}
				//File f = new File(excelpath);
				FileOutputStream fos = new FileOutputStream(excelpath);
				wb.write(fos);
				fos.close();
				System.out.println("导出完成");
		}
	  
	  
	  
	  //获取两个日期之间的所有日期
	  public static List<Date> getBetweenDates(Date sdate,Date edate){
		  List<Date> list = new ArrayList<Date>();
	          int s = (int)((edate.getTime() - sdate.getTime())/ (24 * 60 * 60 * 1000)); 
	          if(s>0){ 
	            for(int i = 0;i<=s;i++){ 
	              long todayDate = sdate.getTime() + i * 24 * 60 * 60 * 1000; 
	              Date tmDate = new Date(todayDate); 
	              list.add(tmDate); 
	            } 
	          }
		  return list;
	  }
	  
	  //url传值转码
	  public static String fix2utf(String str) throws Exception{
		  String newStr =new String (str.getBytes("iso-8859-1"),"utf-8");
		  return newStr;
	  }
	  
}
