package com.iss.gms.web.action.emp;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.LazyValidatorForm;

import com.iss.gms.entity.EmployeeRelegationInfo;
import com.iss.gms.entity.ProjectInfo;
import com.iss.gms.service.IEmployeeService;
import com.iss.gms.service.IProjectService;
import com.iss.gms.utils.GmsUtils;

public class EmployeeRelegationInfoAction extends DispatchAction{
	private IEmployeeService employeeService;
	private IProjectService projectService;
	public void setProjectService(IProjectService projectService) {
		this.projectService = projectService;
	}
	public void setEmployeeService(IEmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	private static final Log log = LogFactory.getLog(EmployeeRelegationInfoAction.class);
	DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
	

	//查询
	public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			LazyValidatorForm lzform = (LazyValidatorForm)form;
			String name = (String)lzform.get("ename4rel");
			String dateS = (String)lzform.get("estimateLDateS4rel"); 
			String dateE = (String)lzform.get("estimateLDateE4rel"); 
			String ProMgr = (String)lzform.get("ProMgr4rel"); 
			String status = (String)lzform.get("status4rel");
			EmployeeRelegationInfo eri = new EmployeeRelegationInfo();
			eri.setEmployeeName(name);
			if(dateE!=null&&dateE.trim().length()>0){
				Date estimateLDateE = fmt.parse(dateE);
				eri.setEstimateLDateE(estimateLDateE);
			}
			if(dateS!=null&&dateS.trim().length()>0){
				Date estimateLDateS = fmt.parse(dateS);
				eri.setEstimateLDateS(estimateLDateS);
			}
			eri.setProjectManager(ProMgr);
			eri.setWorkstaus(status);
			List lt = employeeService.queryRelegationInfo(eri);
			List<String> proMgrList = employeeService.queryNameListByRank("3");
			request.setAttribute("proMgrList",proMgrList);
			if(lt!=null){
				request.setAttribute("eriList", lt);
				return mapping.findForward("success");
			}else{
				return mapping.findForward("error");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.getMessage());
			return mapping.findForward("error");
		}
	}
	//跳转到添加页面
	public ActionForward toAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			try {
				List<ProjectInfo> list = projectService.queryProInfoByName("");
				request.setAttribute("proList", list);
				//项目总监
				List<String> proDrtList = employeeService.queryNameListByRank("1");
				//项目经理
				List<String> proMgrList = employeeService.queryNameListByRank("3");
				//项目组长
				List<String> proLdrList = employeeService.queryNameListByRank("4");
				request.setAttribute("proDrtList",proDrtList);
				request.setAttribute("proMgrList",proMgrList);
				request.setAttribute("proLdrList",proLdrList);
				return mapping.findForward("success1");
			} catch (Exception e) {
				e.printStackTrace();
				return mapping.findForward("error");
			}
	}
	
	//添加信息
	public ActionForward addRelInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
			try {
				EmployeeRelegationInfo eri = new EmployeeRelegationInfo();
				//员工编号
				eri.setEmployeeId(BeanUtils.getProperty(form, "eId4addRel"));
				eri.setEmployeeName(BeanUtils.getProperty(form, "eName4addRel"));
				eri.setProjectDirector(BeanUtils.getProperty(form, "proDrt4addRel"));
				eri.setProjectManager(BeanUtils.getProperty(form, "proMgr4addRel"));
				eri.setProjectLeader(BeanUtils.getProperty(form, "proLdr4addRel"));
				eri.setGrade(BeanUtils.getProperty(form, "grade4addRel"));
				eri.setBusinessLine(BeanUtils.getProperty(form, "bline4addRel"));
				eri.setBelongedTSprojectId(BeanUtils.getProperty(form, "proNum4addRel"));
				ProjectInfo pi = projectService.queryProInfoById(BeanUtils.getProperty(form, "tsPro4addRel"));
				if(pi!=null)
				eri.setBelongedTSproject(pi.getProName());
				eri.setWorkstaus(BeanUtils.getProperty(form, "status4addRel"));
				if(BeanUtils.getProperty(form, "freeDate4addRel").trim().length()>0&&BeanUtils.getProperty(form, "freeDate4addRel")!=null){
					eri.setAdmittancefreeDate(fmt.parse(BeanUtils.getProperty(form, "freeDate4addRel")));
				}
				if(BeanUtils.getProperty(form, "billingDate4addRel").trim().length()>0&&BeanUtils.getProperty(form, "billingDate4addRel")!=null){
					eri.setAdmittancebillingDate(fmt.parse(BeanUtils.getProperty(form, "billingDate4addRel")));
				}
				if(BeanUtils.getProperty(form, "stimateDate4addRel").trim().length()>0&&BeanUtils.getProperty(form, "stimateDate4addRel")!=null){
					eri.setOutsceneestimateDate(fmt.parse(BeanUtils.getProperty(form, "stimateDate4addRel")));
				}
				if(BeanUtils.getProperty(form, "realityDate4addRel").trim().length()>0&&BeanUtils.getProperty(form, "realityDate4addRel")!=null){
					eri.setOutscenerealityDate(fmt.parse(BeanUtils.getProperty(form, "realityDate4addRel")));
				}
				employeeService.addRelegationInfo(eri);
				request.setAttribute("success_msg", "yes");
				return mapping.findForward("success1");
			} catch (Exception e) {
				e.printStackTrace();
				return mapping.findForward("error");
			}
	}
	//跳转到修改页面
	public ActionForward toUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			try {
				String str = GmsUtils.fix2utf(request.getParameter("str"));
				String tem [] = str.split(",");
				EmployeeRelegationInfo eri4query = new EmployeeRelegationInfo();
				eri4query.setEmployeeId(tem[0]);
				eri4query.setBelongedTSproject(tem[1]);
				eri4query.setWorkstaus(tem[2]);
				EmployeeRelegationInfo eri = employeeService.queryEriInfoByEid(eri4query);
				DateFormat date = new SimpleDateFormat("yyyy-MM-dd");
				if(eri.getAdmittancefreeDate()!= null){
				String admittancefreeDate = date.format(eri.getAdmittancefreeDate());
				request.setAttribute("admittancefreeDate", admittancefreeDate);}
				if(eri.getAdmittancebillingDate()!= null){
				String admittancebillingDate = date.format(eri.getAdmittancebillingDate());
				request.setAttribute("admittancebillingDate", admittancebillingDate);}
				if(eri.getOutsceneestimateDate()!= null){
				String outsceneestimateDate = date.format(eri.getOutsceneestimateDate());
				request.setAttribute("outsceneestimateDate", outsceneestimateDate);}
				if(eri.getOutscenerealityDate()!= null){
				String outscenerealityDate = date.format(eri.getOutscenerealityDate());
				request.setAttribute("outscenerealityDate", outscenerealityDate);}
	//根据项目名称获取项目信息
				List<ProjectInfo> list = projectService.queryProInfoByName("");
				request.setAttribute("proList", list);
				request.setAttribute("eri", eri);
				
				//项目总监
				List<String> proDrtList = employeeService.queryNameListByRank("1");
				//项目经理
				List<String> proMgrList = employeeService.queryNameListByRank("3");
				//项目组长
				List<String> proLdrList = employeeService.queryNameListByRank("4");
				request.setAttribute("proDrtList",proDrtList);
				request.setAttribute("proMgrList",proMgrList);
				request.setAttribute("proLdrList",proLdrList);
				
				return mapping.findForward("success2");
			} catch (Exception e) {
				e.printStackTrace();
				return mapping.findForward("error");
			}
	}
	
	//修改页面
	public ActionForward updateRelInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
			try {
				EmployeeRelegationInfo eri = new EmployeeRelegationInfo();
				//员工编号
				eri.setEmployeeId(BeanUtils.getProperty(form, "eId4relUd"));
				eri.setEmployeeName(BeanUtils.getProperty(form, "eName4relUd"));
				eri.setProjectDirector(BeanUtils.getProperty(form, "proDrt4relUd"));
				eri.setProjectManager(BeanUtils.getProperty(form, "proMgr4relUd"));
				eri.setProjectLeader(BeanUtils.getProperty(form, "proLdr4relUd"));
				eri.setGrade(BeanUtils.getProperty(form, "grade4relUd"));
				eri.setBusinessLine(BeanUtils.getProperty(form, "bline4relUd"));
				eri.setBelongedTSprojectId(BeanUtils.getProperty(form, "proNum4relUd"));
				List<ProjectInfo> tem = projectService.queryProInfoByName(BeanUtils.getProperty(form, "tsPro4relUd"));
				if(tem.size()==1) eri.setNewProName(tem.get(0).getProName());
				eri.setNewWorkstatus(BeanUtils.getProperty(form, "status4relUd"));
				if(BeanUtils.getProperty(form, "freeDate4relUd").trim().length()>0&&BeanUtils.getProperty(form, "freeDate4relUd")!=null){
					eri.setAdmittancefreeDate(fmt.parse(BeanUtils.getProperty(form, "freeDate4relUd")));
				}
				if(BeanUtils.getProperty(form, "billingDate4relUd").trim().length()>0&&BeanUtils.getProperty(form, "billingDate4relUd")!=null){
					eri.setAdmittancebillingDate(fmt.parse(BeanUtils.getProperty(form, "billingDate4relUd")));
				}
				if(BeanUtils.getProperty(form, "stimateDate4relUd").trim().length()>0&&BeanUtils.getProperty(form, "stimateDate4relUd")!=null){
					eri.setOutsceneestimateDate(fmt.parse(BeanUtils.getProperty(form, "stimateDate4relUd")));
				}
				if(BeanUtils.getProperty(form, "realityDate4relUd").trim().length()>0&&BeanUtils.getProperty(form, "realityDate4relUd")!=null){
					eri.setOutscenerealityDate(fmt.parse(BeanUtils.getProperty(form, "realityDate4relUd")));
				}
				eri.setWorkstaus(BeanUtils.getProperty(form, "oldStatus"));
				eri.setBelongedTSproject(BeanUtils.getProperty(form, "oldProName"));
				employeeService.modifyEmpRelInfo(eri);
				request.setAttribute("success_msg", "yes");
				return mapping.findForward("success2");
			} catch (Exception e) {
				e.printStackTrace();
				return mapping.findForward("error");
			}
	}
	
	//删除归属信息
	public ActionForward deleteRelInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			try {
				LazyValidatorForm lzform = (LazyValidatorForm)form;
				String msg=(String)lzform.get("msg4del");
				String msgs [] = msg.split("_-_");
				for(String tem :msgs){
					EmployeeRelegationInfo eri = new EmployeeRelegationInfo();
					String a[] = tem.split(",");
					eri.setEmployeeId(a[0]);
					eri.setBelongedTSproject(a[1]);
					eri.setWorkstaus(a[2]);
					employeeService.removeEmpRelInfo(eri);
				}
				return search(mapping, lzform, request, response);
			} catch (Exception e) {
				e.printStackTrace();
				return mapping.findForward("error");
			}
	}
	//跳转到导入页面
	public ActionForward toImp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			try {
				return mapping.findForward("success3");
			} catch (Exception e) {
				e.printStackTrace();
				return mapping.findForward("error");
			}
	}
	
}
